plugins {
    id 'org.springframework.boot' version '3.2.4'
    id 'io.spring.dependency-management' version '1.1.4'
    id 'org.cyclonedx.bom' version '1.8.1'
    id 'com.github.ben-manes.versions' version '0.50.0'
    id 'com.adarshr.test-logger' version '4.0.0'
    id 'org.flywaydb.flyway' version '9.15.0'
    id 'java'
    id 'idea'
    id 'jacoco'
}

group = 'fi.epassi'

jacoco {
    toolVersion = "0.8.11"
    reportsDirectory = layout.buildDirectory.dir('customJacocoReportDir')
}

java {
    sourceCompatibility = JavaVersion.VERSION_21
    targetCompatibility = JavaVersion.VERSION_21
}

repositories {
    mavenCentral()
    maven {url 'https://jitpack.io'}
    maven {url 'https://plugins.gradle.org/m2/'}
}

ext {
    set('springCloudVersion', '2023.0.0')
}

jacoco {
    toolVersion = "0.8.11" // Specify the JaCoCo version
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-validation'

    // hiberate
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.hibernate:hibernate-core:6.6.5.Final'
    implementation 'org.springframework.boot:spring-boot-starter-data-jdbc'

    // -- swagger integration
    implementation 'org.springdoc:springdoc-openapi-starter-webmvc-ui:2.4.0'

    // -- actuator health check
    implementation 'org.springframework.boot:spring-boot-starter-actuator'

    // -- Clients & Logging
    implementation 'org.springframework.cloud:spring-cloud-starter-openfeign'
    implementation 'org.zalando:logbook-spring-boot-starter:3.2.0'

    // -- Exception handling
    implementation 'org.zalando:problem-violations:0.29.1'
    implementation 'org.zalando:problem-spring-web:0.29.1'

    // -- DB
//    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
//    implementation 'org.springframework.boot:spring-boot-starter-data-jdbc'
    implementation 'com.h2database:h2:2.2.224'
    implementation 'org.flywaydb:flyway-core:10.10.0'
    implementation 'org.flywaydb:flyway-mysql:10.10.0'
    implementation 'org.hibernate.validator:hibernate-validator:8.0.1.Final'
    // Spring Data R2DBC
    implementation 'org.springframework.boot:spring-boot-starter-data-r2dbc'
    // R2DBC Driver - for example, H2
    implementation 'io.r2dbc:r2dbc-h2'

    // -- Cache
    implementation 'org.springframework.boot:spring-boot-starter-cache'
    implementation 'com.github.ben-manes.caffeine:caffeine'

    // -- async performance
    implementation 'io.projectreactor:reactor-core:3.6.4'
    // -- Others
    implementation 'org.apache.commons:commons-lang3:3.14.0'

    // -- Tests
    testImplementation 'org.springframework.boot:spring-boot-starter-webflux'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
    testImplementation 'io.projectreactor:reactor-test:3.1.0.RELEASE'

    // -- Lombok
    compileOnly 'org.projectlombok:lombok:1.18.30'
    annotationProcessor 'org.projectlombok:lombok:1.18.30'
    testCompileOnly 'org.projectlombok:lombok:1.18.30'
    testAnnotationProcessor 'org.projectlombok:lombok:1.18.30'
    annotationProcessor 'org.springframework.boot:spring-boot-configuration-processor'
}

dependencyManagement {
    imports {
        mavenBom "org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}"
    }
}

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

testlogger {
    theme 'mocha-parallel'
}

test {
    useJUnitPlatform()
}
test {
    finalizedBy jacocoTestReport
}

jacocoTestReport {
    reports {
        xml.required = false
        csv.required = false
        html.outputLocation = layout.buildDirectory.dir('jacocoHtml')
    }
}

jacocoTestReport {
    dependsOn test // Ensures tests run before generating the report

    reports {
        xml.required.set(true)
        csv.required.set(false)
        html.outputLocation.set(file("${buildDir}/jacocoHtml"))
    }
}

jacocoTestCoverageVerification {
    violationRules {
        rule {
            limit {
                minimum = 0.80 // Set minimum test coverage (e.g., 80%)
            }
        }
    }
}

// Flyway configuration (optional)
flyway {
    url = 'jdbc:h2:file:./db/recruitment_app;MODE=MYSQL'
    user = 'recruitment_app'
    password = 'recruitment_app'
    locations = ['classpath:db/migration']
}

//
//task flywayRepair(type: FlywayRepair) {
//    description = 'Repairs the Flyway migrations'
//    group = 'Flyway'
//}